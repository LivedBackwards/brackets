// 

#include <v8.h>
#include <uv.h>
#include <node.h>

#define MAXPATH 1024
#define READ_DIRECTORY_CHANGES_BUFSIZE  8192

using namespace v8;

static Persistent<FunctionTemplate> constructor_template;
static Persistent<String> emit_sym;
static Persistent<String> change_sym;

class CAsyncDirWatchInfo
{
public:
	// struct tracking ReadDirectoryChangesW() changes
	struct sEntry {
		LPWSTR m_lpszFilename;
		DWORD m_dwAction;
		struct sEntry *m_pPrevious, *m_pNext;

		sEntry(LPWSTR lpszFilename, int iFilenameLen, DWORD dwAction);
		~sEntry();
	};
	typedef sEntry* LPENTRY;

public:
	CAsyncDirWatchInfo();
	~CAsyncDirWatchInfo();

	void Enqueue(LPENTRY lpEntry);
	LPENTRY Dequeue();

protected:
	struct sEntry *m_pHead, *m_pTail;
	HANDLE m_hMutex;
};

class NodeFSEvents : public node::ObjectWrap
{
public:
	NodeFSEvents(const char *lpszPath);
	~NodeFSEvents();

	// JS wrapper methods
	static void Initialize(Handle<Object> target);
	static Handle<Value> Shutdown(const Arguments& args);
	static Handle<Value> New(const Arguments& args);

protected:
	// file watching methods
	void Startup(const char *lpszPath);
	void Shutdown();
public:
	static DWORD WINAPI Run(LPVOID lpData);
	static void Callback(uv_async_t *handle, int status);

protected:
	WCHAR m_szPathName[MAXPATH + 1];
	uv_async_t m_uvaWatcher;
	HANDLE m_hAsyncDir;
	HANDLE m_hIoCPort;
	OVERLAPPED m_Overlapped;
	HANDLE m_hThread;
	PFILE_NOTIFY_INFORMATION m_lpBuffer;
	CAsyncDirWatchInfo *m_pWatchInfo;
};
